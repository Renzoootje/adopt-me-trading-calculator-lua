local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local localPlayer = Players.LocalPlayer

-- Debug flag - set to true to see what's happening
local DEBUG = true

local function debug_print(...)
    if DEBUG then
        print("[TRADE DEBUG]", ...)
    end
end

-- Helper functions
local function safe_get(tbl, ...)
    local current = tbl
    local path = {...}
    
    for i, key in ipairs(path) do
        if type(current) ~= "table" or current[key] == nil then
            return nil
        end
        current = current[key]
    end
    
    return current
end

local function table_keys(tbl)
    local keys = {}
    if type(tbl) == "table" then
        for k, _ in pairs(tbl) do
            table.insert(keys, tostring(k))
        end
    end
    return keys
end

-- Simple initialization
debug_print("Starting initialization...")

local Fsys = ReplicatedStorage:WaitForChild("Fsys", 10)
if not Fsys then
    debug_print("ERROR: Fsys not found")
    return
end

local FsysModule = require(Fsys)
if not FsysModule then
    debug_print("ERROR: FsysModule failed to load")
    return
end

debug_print("FsysModule loaded, type:", type(FsysModule))
debug_print("FsysModule keys:", table.concat(table_keys(FsysModule), ", "))

-- Find load function
local load
if type(FsysModule) == "table" then
    load = FsysModule.load or FsysModule.Load or FsysModule.require or FsysModule.getModule or FsysModule.get
    if type(load) ~= "function" then
        debug_print("ERROR: No valid loader found")
        return
    else
        debug_print("Loader found:", tostring(load))
    end
end

-- Load modules
local ClientData, ItemDB

if load then
    local success1, result1 = pcall(function() return load("ClientData") end)
    local success2, result2 = pcall(function() return load("ItemDB") end)
    
    if success1 then 
        ClientData = result1
        debug_print("ClientData loaded via loader")
    end
    if success2 then 
        ItemDB = result2
        debug_print("ItemDB loaded via loader")
    end
end

-- Fallback
if not ClientData then
    local CD = ReplicatedStorage:FindFirstChild("ClientData")
    if CD then
        ClientData = require(CD)
        debug_print("ClientData loaded via fallback")
    end
end

if not ItemDB then
    local IDB = ReplicatedStorage:FindFirstChild("ItemDB")
    if IDB then
        ItemDB = require(IDB)
        debug_print("ItemDB loaded via fallback")
    end
end

if not ClientData then
    debug_print("ERROR: ClientData not loaded")
    return
end

if not ItemDB then
    debug_print("ERROR: ItemDB not loaded")
    return
end

debug_print("Both modules loaded successfully")
debug_print("ClientData type:", type(ClientData))
debug_print("ClientData keys:", table.concat(table_keys(ClientData), ", "))

-- Value data
local values_data = {
    ["Hedgehog"] = {
        rvalue = 42.5,
        nvalue = 176.0,
        mvalue = 725.0,
        ["rvalue - nopotion"] = 42.0,
        ["rvalue - ride"] = 42.0,
        ["rvalue - fly"] = 42.0,
        ["rvalue - fly&ride"] = 42.5,
        ["nvalue - nopotion"] = 181.0,
        ["nvalue - ride"] = 177.0,
        ["nvalue - fly"] = 177.0,
        ["nvalue - fly&ride"] = 176.0,
        ["mvalue - nopotion"] = 755.0,
        ["mvalue - ride"] = 739.0,
        ["mvalue - fly"] = 739.0,
        ["mvalue - fly&ride"] = 725.0,
        name = "Hedgehog"
    }
}

-- Simple trade data getter
local function get_trade_data()
    local methods_to_try = {
        function() return ClientData.trade end,
        function() return ClientData.Trade end,
        function() return ClientData.get and ClientData.get("trade") end,
        function() return ClientData.Get and ClientData.Get("trade") end,
        function() return ClientData.get and ClientData.get("Trade") end,
        function() return ClientData.getData and ClientData.getData("trade") end,
    }
    
    for i, method in ipairs(methods_to_try) do
        local success, result = pcall(method)
        if success and result then
            debug_print("Trade data found using method", i)
            debug_print("Trade data type:", type(result))
            if type(result) == "table" then
                debug_print("Trade data keys:", table.concat(table_keys(result), ", "))
            end
            return result
        end
    end
    
    debug_print("No trade data found")
    return nil
end

local function calculate_total(offer, label)
    debug_print("Calculating total for", label)
    
    if not offer then
        debug_print(label, "offer is nil")
        return 0
    end
    
    debug_print(label, "offer type:", type(offer))
    if type(offer) == "table" then
        debug_print(label, "offer keys:", table.concat(table_keys(offer), ", "))
    end
    
    local items = offer.items
    if not items then
        debug_print(label, "no items found")
        return 0
    end
    
    debug_print(label, "has", #items, "items")
    
    local total = 0
    for i, item in ipairs(items) do
        debug_print(label, "Item", i, ":")
        debug_print("  Category:", item.category)
        debug_print("  Kind:", item.kind)
        
        if item.category and item.kind then
            local item_data = ItemDB[item.category] and ItemDB[item.category][item.kind]
            local item_name = item_data and item_data.name or item.kind
            
            debug_print("  Item name:", item_name)
            
            local value_data = values_data[item_name]
            if value_data then
                local value = value_data.rvalue or 0
                debug_print("  Value found:", value)
                total = total + value
            else
                debug_print("  No value data for:", item_name)
            end
        end
    end
    
    debug_print(label, "total value:", total)
    return total
end

-- Main loop with extensive debugging
local loop_count = 0
RunService.Heartbeat:Connect(function()
    loop_count = loop_count + 1
    
    -- Only debug every 60 frames (about once per second)
    if loop_count % 60 == 1 then
        debug_print("=== Loop", math.floor(loop_count/60), "===")
        
        -- Check for trade data
        local trade_state = get_trade_data()
        if not trade_state then
            debug_print("No trade state found")
            return
        end
        
        debug_print("Trade state found!")
        
        -- Check for trade UI
        local trade_app = localPlayer.PlayerGui:FindFirstChild("TradeApp")
        if not trade_app then
            debug_print("TradeApp not found in PlayerGui")
            debug_print("PlayerGui children:", table.concat(table_keys(localPlayer.PlayerGui), ", "))
            return
        end
        
        debug_print("TradeApp found!")
        debug_print("TradeApp children:", table.concat(table_keys(trade_app), ", "))
        
        -- Get offers
        local my_offer, partner_offer
        if localPlayer == trade_state.sender then
            my_offer = trade_state.sender_offer
            partner_offer = trade_state.recipient_offer
            debug_print("I am the sender")
        else
            my_offer = trade_state.recipient_offer  
            partner_offer = trade_state.sender_offer
            debug_print("I am the recipient")
        end
        
        if my_offer and partner_offer then
            local my_total = calculate_total(my_offer, "My")
            local partner_total = calculate_total(partner_offer, "Partner")
            local diff = my_total - partner_total
            
            debug_print("Final totals - Me:", my_total, "Partner:", partner_total, "Diff:", diff)
            
            -- Try to find and update labels
            local frame = trade_app:FindFirstChild("Frame")
            if frame then
                debug_print("Frame found, children:", table.concat(table_keys(frame), ", "))
                
                local neg_frame = frame:FindFirstChild("NegotiationFrame")
                if neg_frame then
                    debug_print("NegotiationFrame found!")
                    debug_print("NegotiationFrame children:", table.concat(table_keys(neg_frame), ", "))
                    
                    -- Try to update any text labels we can find
                    for _, child in pairs(neg_frame:GetDescendants()) do
                        if child:IsA("TextLabel") then
                            debug_print("Found TextLabel:", child.Name, "Text:", child.Text)
                        end
                    end
                else
                    debug_print("NegotiationFrame not found")
                end
            else
                debug_print("Frame not found in TradeApp")
            end
        else
            debug_print("Offers not found - my_offer:", my_offer ~= nil, "partner_offer:", partner_offer ~= nil)
        end
    end
end)

debug_print("Script started and running!")
