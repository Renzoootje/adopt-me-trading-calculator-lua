local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local localPlayer = Players.LocalPlayer

-- Helper: get keys of a table (for debugging)
local function table_keys(tbl)
    local keys = {}
    for k, _ in pairs(tbl) do
        table.insert(keys, tostring(k))
    end
    return keys
end

-- Wait for Fsys
local Fsys = ReplicatedStorage:WaitForChild("Fsys", 10)
if not Fsys then
    warn("Fsys not found")
    return
end

local FsysModule = require(Fsys)
if not FsysModule then
    warn("Fsys invalid")
    return
end

-- Find load function
local load
if type(FsysModule) == "table" then
    load = FsysModule.load or FsysModule.Load or FsysModule.require or FsysModule.getModule or FsysModule.get
    if type(load) ~= "function" then
        warn("No valid loader in Fsys. Keys: " .. table.concat(table_keys(FsysModule), ", "))
    end
end

-- Load ClientData + ItemDB
local ClientData, ItemDB
if load then
    ClientData = load("ClientData")
    ItemDB = load("ItemDB")
end
if not ClientData or not ItemDB then
    warn("Fallback to direct require")
    local CD = ReplicatedStorage:FindFirstChild("ClientData")
    local IDB = ReplicatedStorage:FindFirstChild("ItemDB")
    if CD then ClientData = require(CD) end
    if IDB then ItemDB = require(IDB) end
end
if not ClientData or not ItemDB then
    warn("Failed to load ClientData or ItemDB")
    return
end

-- Value list (1 sample pet)
local values_data = {
    ["0"] = {
        image = "/images/pets/Hedgehog.png",
        rvalue = 42.5,
        nvalue = 176.0,
        mvalue = 725.0,
        ["rvalue - nopotion"] = 42.0,
        ["rvalue - ride"] = 42.0,
        ["rvalue - fly"] = 42.0,
        ["rvalue - fly&ride"] = 42.5,
        ["nvalue - nopotion"] = 181.0,
        ["nvalue - ride"] = 177.0,
        ["nvalue - fly"] = 177.0,
        ["nvalue - fly&ride"] = 176.0,
        ["mvalue - nopotion"] = 755.0,
        ["mvalue - ride"] = 739.0,
        ["mvalue - fly"] = 739.0,
        ["mvalue - fly&ride"] = 725.0,
        rarity = "ultra rare",
        type = "pets",
        name = "Hedgehog",
        id = "0"
    }
}

-- Map by name
local name_to_data = {}
for _, d in pairs(values_data) do
    if d.name then name_to_data[d.name] = d end
end

-- Safe get offers (no deep copy, just read values)
local function getOffers(trade_state)
    local my_offer, partner_offer
    if localPlayer == trade_state.sender then
        my_offer = trade_state.sender_offer
        partner_offer = trade_state.recipient_offer
    else
        my_offer = trade_state.recipient_offer
        partner_offer = trade_state.sender_offer
    end
    return my_offer, partner_offer
end

-- Calculate total (read-only access)
local function calculate_total(offer)
    if not offer or not offer.items then return 0 end
    local total = 0
    
    for _, item in ipairs(offer.items) do
        -- Safe access to ItemDB
        local item_data = nil
        if ItemDB[item.category] then
            item_data = ItemDB[item.category][item.kind]
        end
        
        local item_name = item_data and (item_data.name or item.kind) or "Unknown"
        local data = name_to_data[item_name]
        
        if data then
            local value = 0
            if item.category == "pets" then
                local base = "rvalue"
                
                -- Check for mega neon or neon
                if item.properties and item.properties.mega_neon then
                    base = "mvalue"
                elseif item.properties and item.properties.neon then
                    base = "nvalue"
                end
                
                -- Check for potions
                local suffix = " - nopotion"
                if item.properties then
                    if item.properties.flyable and item.properties.rideable then
                        suffix = " - fly&ride"
                    elseif item.properties.flyable then
                        suffix = " - fly"
                    elseif item.properties.rideable then
                        suffix = " - ride"
                    end
                end
                
                value = data[base .. suffix] or data[base] or 0
            else
                value = data.value or 0
            end
            total = total + value
        end
    end
    return total
end

-- Main loop
RunService.Heartbeat:Connect(function()
    -- Safe access to ClientData
    local trade_state = nil
    if ClientData and ClientData.get then
        local success, result = pcall(function()
            return ClientData.get("trade")
        end)
        if success then
            trade_state = result
        end
    end
    
    if not trade_state then return end

    local trade_app = localPlayer.PlayerGui:FindFirstChild("TradeApp")
    if not trade_app then return end

    local my_offer, partner_offer = getOffers(trade_state)
    local my_total = calculate_total(my_offer)
    local partner_total = calculate_total(partner_offer)
    local diff = my_total - partner_total

    local neg_frame = trade_app.Frame:FindFirstChild("NegotiationFrame")
    if not neg_frame then return end

    -- Update labels safely
    local you_frame = neg_frame.Header:FindFirstChild("YouFrame")
    if you_frame and you_frame:FindFirstChild("NameLabel") then
        you_frame.NameLabel.Text = "You (" .. string.format("%.2f", my_total) .. ")"
    end
    
    local partner_frame = neg_frame.Header:FindFirstChild("PartnerFrame")
    if partner_frame and partner_frame:FindFirstChild("NameLabel") then
        partner_frame.NameLabel.Text = "Partner (" .. string.format("%.2f", partner_total) .. ")"
    end

    local body = neg_frame:FindFirstChild("Body")
    if body and body:FindFirstChild("TextLabel") then
        if diff > 0 then
            body.NameLabel.Text = "+" .. string.format("%.2f", diff) .. " (You lose)"
            body.NameLabel.TextColor3 = Color3.new(1, 0, 0)
        elseif diff < 0 then
            body.NameLabel.Text = "+" .. string.format("%.2f", math.abs(diff)) .. " (You win)"
            body.NameLabel.TextColor3 = Color3.new(0, 1, 0)
        else
            body.NameLabel.Text = "Fair Trade"
            body.NameLabel.TextColor3 = Color3.new(1, 1, 1)
        end
    end
end)
