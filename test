local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local localPlayer = Players.LocalPlayer

-- Helper function to get table keys for debugging
function table.keys(tbl)
    local keys = {}
    for key, _ in pairs(tbl) do
        table.insert(keys, tostring(key))
    end
    return keys
end

-- Wait for Fsys module
local Fsys = ReplicatedStorage:WaitForChild("Fsys", 10) -- Timeout after 10 seconds
if not Fsys then
    warn("Fsys module not found in ReplicatedStorage")
    return
end

-- Require Fsys
local FsysModule = require(Fsys)
if not FsysModule or type(FsysModule) ~= "table" then
    warn("Fsys did not return a valid module, got: " .. typeof(FsysModule))
    return
end

-- Try to find a load function
local load = FsysModule.load or FsysModule.Load or FsysModule.require or FsysModule.getModule or FsysModule.get
if load and type(load) ~= "function" then
    warn("FsysModule.load is not a function, it is a " .. type(load))
    load = nil
end

-- Load ClientData and ItemDB
local ClientData
local ItemDB

if load then
    ClientData = load("ClientData")
    ItemDB = load("ItemDB")
end

-- Fallback: direct require
if not ClientData then
    local cd = ReplicatedStorage:FindFirstChild("ClientData")
    if cd then
        ClientData = require(cd)
    end
end
if not ItemDB then
    local db = ReplicatedStorage:FindFirstChild("ItemDB")
    if db then
        ItemDB = require(db)
    end
end

if not ClientData or not ItemDB then
    warn("Failed to load ClientData or ItemDB")
    return
end

-- Simple JSON data (only one pet kept)
local values_data = {
    ["0"] = {
        name = "Hedgehog",
        rvalue = 42.5,
        nvalue = 176.0,
        mvalue = 725.0,
        ["rvalue - nopotion"] = 42.0,
        ["rvalue - ride"] = 42.0,
        ["rvalue - fly"] = 42.0,
        ["rvalue - fly&ride"] = 42.5,
        ["nvalue - nopotion"] = 181.0,
        ["nvalue - ride"] = 177.0,
        ["nvalue - fly"] = 177.0,
        ["nvalue - fly&ride"] = 176.0,
        ["mvalue - nopotion"] = 755.0,
        ["mvalue - ride"] = 739.0,
        ["mvalue - fly"] = 739.0,
        ["mvalue - fly&ride"] = 725.0,
        rarity = "ultra rare",
        type = "pets",
        id = "0"
    }
}

-- Create lookup map
local name_to_data = {}
for _, data in pairs(values_data) do
    if data.name then
        name_to_data[data.name] = data
    end
end

-- Function to calculate offer value
local function calculate_total(offer)
    if not offer or not offer.items then return 0 end
    local total = 0

    for _, item in ipairs(offer.items) do
        local item_data = ItemDB[item.category] and ItemDB[item.category][item.kind]
        local item_name = item_data and (item_data.name or item.kind) or "Unknown"
        local data = name_to_data[item_name]

        if data then
            local value = 0
            if item.category == "pets" then
                local base = "rvalue"
                if item.properties and item.properties.mega_neon then
                    base = "mvalue"
                elseif item.properties and item.properties.neon then
                    base = "nvalue"
                end
                local suffix = " - nopotion"
                if item.properties and item.properties.flyable and item.properties.rideable then
                    suffix = " - fly&ride"
                elseif item.properties and item.properties.flyable then
                    suffix = " - fly"
                elseif item.properties and item.properties.rideable then
                    suffix = " - ride"
                end
                local key = base .. suffix
                value = data[key] or 0
            else
                value = data.value or 0
            end
            total = total + value
        end
    end
    return total
end

-- Safe getter for trade state
local function get_trade_state()
    if ClientData.get and type(ClientData.get) == "function" then
        return ClientData.get("trade")
    elseif type(ClientData) == "function" then
        return ClientData("trade")
    elseif ClientData.trade then
        return ClientData.trade
    end
    return nil
end

-- Main loop
RunService.Heartbeat:Connect(function()
    local trade_state = get_trade_state()
    if not trade_state then return end

    local trade_app = localPlayer.PlayerGui:FindFirstChild("TradeApp")
    if not trade_app then return end

    local my_offer, partner_offer
    if localPlayer == trade_state.sender then
        my_offer = trade_state.sender_offer
        partner_offer = trade_state.recipient_offer
    else
        my_offer = trade_state.recipient_offer
        partner_offer = trade_state.sender_offer
    end

    local my_total = calculate_total(my_offer)
    local partner_total = calculate_total(partner_offer)
    local diff = my_total - partner_total

    local neg_frame = trade_app:FindFirstChild("Frame") and trade_app.Frame:FindFirstChild("NegotiationFrame")
    if not neg_frame then return end

    -- Update labels safely
    local you_label = neg_frame:FindFirstChild("Header") and neg_frame.Header:FindFirstChild("YouFrame") and neg_frame.Header.YouFrame:FindFirstChild("NameLabel")
    if you_label then
        you_label.Text = "You (" .. string.format("%.2f", my_total) .. ")"
    end

    local partner_label = neg_frame:FindFirstChild("Header") and neg_frame.Header:FindFirstChild("PartnerFrame") and neg_frame.Header.PartnerFrame:FindFirstChild("NameLabel")
    if partner_label then
        partner_label.Text = "Partner (" .. string.format("%.2f", partner_total) .. ")"
    end

    local body_label = neg_frame:FindFirstChild("Body") and neg_frame.Body:FindFirstChild("TextLabel")
    if body_label then
        if diff > 0 then
            body_label.Text = string.format("%.2f", diff)
            body_label.TextColor3 = Color3.new(1, 0, 0)
        elseif diff < 0 then
            body_label.Text = string.format("%.2f", math.abs(diff))
            body_label.TextColor3 = Color3.new(0, 1, 0)
        else
            body_label.Text = "0"
            body_label.TextColor3 = Color3.new(1, 1, 1)
        end
    end
end)
